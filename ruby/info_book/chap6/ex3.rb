require 'pp'

def euler(x_min, y, x_max, count)
  h = (x_max - x_min).to_f / count
  count.times do |i|
    x = x_min + h * (i + 1)
    y += h * 0.5 / y # f(x,y) = 1/2y
  end
  y
end

euler(0,1,1,100)   # => 1.41482796736591
euler(0,1,1,1000)  # => 1.41427484589246
euler(0,1,1,10000) # => 1.41421968916029


def runge_kutta2(x_min, y, x_max, count)
  h = (x_max - x_min).to_f / count
  count.times do |i|
    x = x_min + h * (i + 1)
    k1 = h * 0.5 / y
    k2 = h * 0.5 / (y + k1)
    y += 0.5 * (k1 + k2) # f(x,y) = 1/2y
  end
  y
end

runge_kutta2(0,1,1,100)   # => 1.41421356445272
runge_kutta2(0,1,1,1000)  # => 1.41421356237517
runge_kutta2(0,1,1,10000) # => 1.41421356237309

def runge_kutta4(x_min, y, x_max, count)
  h = (x_max - x_min).to_f / count
  count.times do |i|
    x = x_min + h * (i + 1)
    k1 = h * 0.5 / y
    k2 = h * 0.5 / (y + k1/2)
    k3 = h * 0.5 / (y + k2/2)
    k4 = h * 0.5 / (y + k3)
    y += (k1 + 2*k2 + 2*k3 + k4) / 6
  end
  y
end

e = {}
r2 = {}
r4 = {}
(1..10).each do |n|
  e[n+1] = euler(0,1,n,100)
  r2[n+1] = runge_kutta2(0,1,n,100)
  r4[n+1] = runge_kutta4(0,1,n,100)
end

pp e.sort
pp r2.sort
pp r4.sort
# >> [[2, 1.41482796736591],
# >>  [3, 1.73364328119781],
# >>  [4, 2.00261313031103],
# >>  [5, 2.23968917809444],
# >>  [6, 2.45409369129868],
# >>  [7, 2.65131050766097],
# >>  [8, 2.83491499550694],
# >>  [9, 3.00739179530205],
# >>  [10, 3.17055061821684],
# >>  [11, 3.32575804769853]]
# >> [[2, 1.41421356445272],
# >>  [3, 1.7320508237213],
# >>  [4, 2.0000000499515],
# >>  [5, 2.23606808628665],
# >>  [6, 2.44948993982767],
# >>  [7, 2.64575162967172],
# >>  [8, 2.82842760177312],
# >>  [9, 3.00000067561631],
# >>  [10, 3.16227857767135],
# >>  [11, 3.31662599602183]]
# >> [[2, 1.41421356237445],
# >>  [3, 1.7320508075884],
# >>  [4, 2.00000000008797],
# >>  [5, 2.23606797775174],
# >>  [6, 2.44948974334955],
# >>  [7, 2.6457513121594],
# >>  [8, 2.82842712665496],
# >>  [9, 3.00000000308723],
# >>  [10, 3.16227766488465],
# >>  [11, 3.31662479724417]]
