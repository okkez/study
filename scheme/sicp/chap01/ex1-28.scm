;; 1.28 間違ってる
(define (expmod base exp m)
  (cond ((= exp 0) 1)
	((even? exp)
	 ((lambda (a)
	    (if (and (or (not (= a 1))
			 (not (= a (- m 1))))
		     (= 1 (remainder (square a) m)))
		0
		(remainder a m))) (square (expmod base (/ exp 2) m))))
	(else (remainder (* base (expmod base (- exp 1) m)) m ))))
(define (miller-rabin-test n)
  (define (try-it a)
    ((lambda (x)
       (and (= x 0)
	    (= x a))) (expmod a (- n 1) n)))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
	((miller-rabin-test n) (fast-prime? n (- times 1)))
	(else #f)))

;; retry ???

(define (square x)
  (* x x))
(define (random n)
  (remainder (sys-random) n))

(define (expmod base exp n)
  (define (f base n)
    (and (not (= base 1))
	 (not (= base (- n 1)))
	 (= (remainder (square base) n) 1)))
  (cond ((= exp 0) 1)
	((f base n) 0)
	((even? exp)
	     (remainder (square (expmod base (/ exp 2) n)) n))
	(else
	     (remainder (* base (expmod base (- exp 1) n)) n))))

(define (miller-rabin-test n)
  (define (try-it a)
    ((lambda (x)
       (or (= x 0)
	   (= x a))) (expmod a (- n 1) n)))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) #t)
	((miller-rabin-test n) (fast-prime? n (- times 1)))
	(else #f)))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
	((miller-rabin-test n) (fast-prime? n (- times 1)))
	(else #f)))
